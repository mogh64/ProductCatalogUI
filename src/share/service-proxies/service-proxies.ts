/* tslint:disable */
/* eslint-disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.1.6.0 (NJsonSchema v10.0.28.0 (Newtonsoft.Json v11.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

import { mergeMap as _observableMergeMap, catchError as _observableCatch } from 'rxjs/operators';
import { Observable, throwError as _observableThrow, of as _observableOf } from 'rxjs';
import { Injectable, Inject, Optional, InjectionToken } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse, HttpResponseBase } from '@angular/common/http';


export const API_BASE_URL = new InjectionToken<string>('API_BASE_URL');

@Injectable()
export class ProductServiceProxy {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @param photoInputDto (optional) 
     * @return Success
     */
    addPhoto(photoInputDto: ProductPhotoInputDto | null | undefined, version: string): Observable<void> {
        let url_ = this.baseUrl + "/api/v{version}/Product/AddPhoto";
        if (version === undefined || version === null)
            throw new Error("The parameter 'version' must be defined.");
        url_ = url_.replace("{version}", encodeURIComponent("" + version)); 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(photoInputDto);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",			
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processAddPhoto(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAddPhoto(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processAddPhoto(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }

    /**
     * @param code (optional) 
     * @param name (optional) 
     * @param sorting (optional) 
     * @param skipCount (optional) 
     * @param maxResultCount (optional) 
     * @param isEnableFilter (optional) 
     * @return Success
     */
    getProducts(code: number | null | undefined, name: string | null | undefined, sorting: string | null | undefined, skipCount: number | null | undefined, maxResultCount: number | null | undefined, isEnableFilter: boolean | null | undefined, version: string): Observable<PagedResultDtoOfProductOutputDto> {
        let url_ = this.baseUrl + "/api/v{version}/Product?";
        if (version === undefined || version === null)
            throw new Error("The parameter 'version' must be defined.");
        url_ = url_.replace("{version}", encodeURIComponent("" + version)); 
        if (code !== undefined)
            url_ += "Code=" + encodeURIComponent("" + code) + "&"; 
        if (name !== undefined)
            url_ += "Name=" + encodeURIComponent("" + name) + "&"; 
        if (sorting !== undefined)
            url_ += "Sorting=" + encodeURIComponent("" + sorting) + "&"; 
        if (skipCount !== undefined)
            url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&"; 
        if (maxResultCount !== undefined)
            url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&"; 
        if (isEnableFilter !== undefined)
            url_ += "IsEnableFilter=" + encodeURIComponent("" + isEnableFilter) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",			
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetProducts(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetProducts(<any>response_);
                } catch (e) {
                    return <Observable<PagedResultDtoOfProductOutputDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<PagedResultDtoOfProductOutputDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetProducts(response: HttpResponseBase): Observable<PagedResultDtoOfProductOutputDto> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = PagedResultDtoOfProductOutputDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<PagedResultDtoOfProductOutputDto>(<any>null);
    }

    /**
     * @param productInputDto (optional) 
     * @return Success
     */
    editProduct(productInputDto: ProductInputDto | null | undefined, version: string): Observable<void> {
        let url_ = this.baseUrl + "/api/v{version}/Product";
        if (version === undefined || version === null)
            throw new Error("The parameter 'version' must be defined.");
        url_ = url_.replace("{version}", encodeURIComponent("" + version)); 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(productInputDto);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",			
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processEditProduct(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processEditProduct(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processEditProduct(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }

    /**
     * @param productInputDto (optional) 
     * @return Success
     */
    addProduct(productInputDto: ProductInputDto | null | undefined, version: string): Observable<ProductOutputDto> {
        let url_ = this.baseUrl + "/api/v{version}/Product";
        if (version === undefined || version === null)
            throw new Error("The parameter 'version' must be defined.");
        url_ = url_.replace("{version}", encodeURIComponent("" + version)); 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(productInputDto);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",			
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processAddProduct(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAddProduct(<any>response_);
                } catch (e) {
                    return <Observable<ProductOutputDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<ProductOutputDto>><any>_observableThrow(response_);
        }));
    }

    protected processAddProduct(response: HttpResponseBase): Observable<ProductOutputDto> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ProductOutputDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ProductOutputDto>(<any>null);
    }

    /**
     * @param id (optional) 
     * @return Success
     */
    removeProduct(id: number | null | undefined, version: string): Observable<void> {
        let url_ = this.baseUrl + "/api/v{version}/Product?";
        if (version === undefined || version === null)
            throw new Error("The parameter 'version' must be defined.");
        url_ = url_.replace("{version}", encodeURIComponent("" + version)); 
        if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",			
            headers: new HttpHeaders({
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processRemoveProduct(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processRemoveProduct(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processRemoveProduct(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }

    /**
     * @param filterInput (optional) 
     * @return Success
     */
    exportExcel(filterInput: ProductFilterInputDto | null | undefined, version: string): Observable<ExcelExportOutputDto> {
        let url_ = this.baseUrl + "/api/v{version}/Product/Export";
        if (version === undefined || version === null)
            throw new Error("The parameter 'version' must be defined.");
        url_ = url_.replace("{version}", encodeURIComponent("" + version)); 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(filterInput);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",			
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processExportExcel(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processExportExcel(<any>response_);
                } catch (e) {
                    return <Observable<ExcelExportOutputDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<ExcelExportOutputDto>><any>_observableThrow(response_);
        }));
    }

    protected processExportExcel(response: HttpResponseBase): Observable<ExcelExportOutputDto> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ExcelExportOutputDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ExcelExportOutputDto>(<any>null);
    }

    /**
     * @return Success
     */
    getProduct(id: number, version: string): Observable<ProductOutputDto> {
        let url_ = this.baseUrl + "/api/v{version}/Product/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        if (version === undefined || version === null)
            throw new Error("The parameter 'version' must be defined.");
        url_ = url_.replace("{version}", encodeURIComponent("" + version)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",			
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetProduct(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetProduct(<any>response_);
                } catch (e) {
                    return <Observable<ProductOutputDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<ProductOutputDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetProduct(response: HttpResponseBase): Observable<ProductOutputDto> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ProductOutputDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ProductOutputDto>(<any>null);
    }

    /**
     * @param productId (optional) 
     * @return Success
     */
    getProductPhoto(productId: number | null | undefined, version: string): Observable<ProductPhotoOutputDto> {
        let url_ = this.baseUrl + "/api/v{version}/Product/GetPhoto?";
        if (version === undefined || version === null)
            throw new Error("The parameter 'version' must be defined.");
        url_ = url_.replace("{version}", encodeURIComponent("" + version)); 
        if (productId !== undefined)
            url_ += "productId=" + encodeURIComponent("" + productId) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",			
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetProductPhoto(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetProductPhoto(<any>response_);
                } catch (e) {
                    return <Observable<ProductPhotoOutputDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<ProductPhotoOutputDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetProductPhoto(response: HttpResponseBase): Observable<ProductPhotoOutputDto> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ProductPhotoOutputDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ProductPhotoOutputDto>(<any>null);
    }

    /**
     * @param productPhotoId (optional) 
     * @return Success
     */
    removePhoto(productPhotoId: number | null | undefined, version: string): Observable<void> {
        let url_ = this.baseUrl + "/api/v{version}/Product/RemovePhoto?";
        if (version === undefined || version === null)
            throw new Error("The parameter 'version' must be defined.");
        url_ = url_.replace("{version}", encodeURIComponent("" + version)); 
        if (productPhotoId !== undefined)
            url_ += "productPhotoId=" + encodeURIComponent("" + productPhotoId) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",			
            headers: new HttpHeaders({
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processRemovePhoto(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processRemovePhoto(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processRemovePhoto(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }
}

export class ProductPhotoInputDto implements IProductPhotoInputDto {
    productId?: number | undefined;
    mimeType?: string | undefined;
    altAttribute?: string | undefined;
    titleAttribute?: string | undefined;
    binaryData?: string | undefined;

    constructor(data?: IProductPhotoInputDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.productId = _data["productId"];
            this.mimeType = _data["mimeType"];
            this.altAttribute = _data["altAttribute"];
            this.titleAttribute = _data["titleAttribute"];
            this.binaryData = _data["binaryData"];
        }
    }

    static fromJS(data: any): ProductPhotoInputDto {
        data = typeof data === 'object' ? data : {};
        let result = new ProductPhotoInputDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["productId"] = this.productId;
        data["mimeType"] = this.mimeType;
        data["altAttribute"] = this.altAttribute;
        data["titleAttribute"] = this.titleAttribute;
        data["binaryData"] = this.binaryData;
        return data; 
    }
}

export interface IProductPhotoInputDto {
    productId?: number | undefined;
    mimeType?: string | undefined;
    altAttribute?: string | undefined;
    titleAttribute?: string | undefined;
    binaryData?: string | undefined;
}

export class ProductInputDto implements IProductInputDto {
    code?: number | undefined;
    name?: string | undefined;
    price?: number | undefined;
    confirmed?: boolean | undefined;
    rowVersion?: string | undefined;
    id?: number | undefined;

    constructor(data?: IProductInputDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.code = _data["code"];
            this.name = _data["name"];
            this.price = _data["price"];
            this.confirmed = _data["confirmed"];
            this.rowVersion = _data["rowVersion"];
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): ProductInputDto {
        data = typeof data === 'object' ? data : {};
        let result = new ProductInputDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["code"] = this.code;
        data["name"] = this.name;
        data["price"] = this.price;
        data["confirmed"] = this.confirmed;
        data["rowVersion"] = this.rowVersion;
        data["id"] = this.id;
        return data; 
    }
}

export interface IProductInputDto {
    code?: number | undefined;
    name?: string | undefined;
    price?: number | undefined;
    confirmed?: boolean | undefined;
    rowVersion?: string | undefined;
    id?: number | undefined;
}

export class ProductOutputDto implements IProductOutputDto {
    code?: number | undefined;
    name?: string | undefined;
    price?: number | undefined;
    lastUpdateTime?: Date | undefined;
    rowVersion?: string | undefined;
    id?: number | undefined;

    constructor(data?: IProductOutputDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.code = _data["code"];
            this.name = _data["name"];
            this.price = _data["price"];
            this.lastUpdateTime = _data["lastUpdateTime"] ? new Date(_data["lastUpdateTime"].toString()) : <any>undefined;
            this.rowVersion = _data["rowVersion"];
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): ProductOutputDto {
        data = typeof data === 'object' ? data : {};
        let result = new ProductOutputDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["code"] = this.code;
        data["name"] = this.name;
        data["price"] = this.price;
        data["lastUpdateTime"] = this.lastUpdateTime ? this.lastUpdateTime.toISOString() : <any>undefined;
        data["rowVersion"] = this.rowVersion;
        data["id"] = this.id;
        return data; 
    }
}

export interface IProductOutputDto {
    code?: number | undefined;
    name?: string | undefined;
    price?: number | undefined;
    lastUpdateTime?: Date | undefined;
    rowVersion?: string | undefined;
    id?: number | undefined;
}

export class PagedResultDtoOfProductOutputDto implements IPagedResultDtoOfProductOutputDto {
    resultList?: ProductOutputDto[] | undefined;
    totalCount?: number | undefined;

    constructor(data?: IPagedResultDtoOfProductOutputDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["resultList"])) {
                this.resultList = [] as any;
                for (let item of _data["resultList"])
                    this.resultList!.push(ProductOutputDto.fromJS(item));
            }
            this.totalCount = _data["totalCount"];
        }
    }

    static fromJS(data: any): PagedResultDtoOfProductOutputDto {
        data = typeof data === 'object' ? data : {};
        let result = new PagedResultDtoOfProductOutputDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.resultList)) {
            data["resultList"] = [];
            for (let item of this.resultList)
                data["resultList"].push(item.toJSON());
        }
        data["totalCount"] = this.totalCount;
        return data; 
    }
}

export interface IPagedResultDtoOfProductOutputDto {
    resultList?: ProductOutputDto[] | undefined;
    totalCount?: number | undefined;
}

export class ProductFilterInputDto implements IProductFilterInputDto {
    code?: number | undefined;
    name?: string | undefined;
    sorting?: string | undefined;
    skipCount?: number | undefined;
    maxResultCount?: number | undefined;
    isEnableFilter?: boolean | undefined;

    constructor(data?: IProductFilterInputDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.code = _data["code"];
            this.name = _data["name"];
            this.sorting = _data["sorting"];
            this.skipCount = _data["skipCount"];
            this.maxResultCount = _data["maxResultCount"];
            this.isEnableFilter = _data["isEnableFilter"];
        }
    }

    static fromJS(data: any): ProductFilterInputDto {
        data = typeof data === 'object' ? data : {};
        let result = new ProductFilterInputDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["code"] = this.code;
        data["name"] = this.name;
        data["sorting"] = this.sorting;
        data["skipCount"] = this.skipCount;
        data["maxResultCount"] = this.maxResultCount;
        data["isEnableFilter"] = this.isEnableFilter;
        return data; 
    }
}

export interface IProductFilterInputDto {
    code?: number | undefined;
    name?: string | undefined;
    sorting?: string | undefined;
    skipCount?: number | undefined;
    maxResultCount?: number | undefined;
    isEnableFilter?: boolean | undefined;
}

export class ExcelExportOutputDto implements IExcelExportOutputDto {
    extension?: string | undefined;
    data?: string | undefined;
    name?: string | undefined;

    constructor(data?: IExcelExportOutputDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.extension = _data["extension"];
            this.data = _data["data"];
            this.name = _data["name"];
        }
    }

    static fromJS(data: any): ExcelExportOutputDto {
        data = typeof data === 'object' ? data : {};
        let result = new ExcelExportOutputDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["extension"] = this.extension;
        data["data"] = this.data;
        data["name"] = this.name;
        return data; 
    }
}

export interface IExcelExportOutputDto {
    extension?: string | undefined;
    data?: string | undefined;
    name?: string | undefined;
}

export class ProductPhotoOutputDto implements IProductPhotoOutputDto {
    productId?: number | undefined;
    mimeType?: string | undefined;
    altAttribute?: string | undefined;
    titleAttribute?: string | undefined;
    binaryData?: string | undefined;
    photoId?: number | undefined;

    constructor(data?: IProductPhotoOutputDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.productId = _data["productId"];
            this.mimeType = _data["mimeType"];
            this.altAttribute = _data["altAttribute"];
            this.titleAttribute = _data["titleAttribute"];
            this.binaryData = _data["binaryData"];
            this.photoId = _data["photoId"];
        }
    }

    static fromJS(data: any): ProductPhotoOutputDto {
        data = typeof data === 'object' ? data : {};
        let result = new ProductPhotoOutputDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["productId"] = this.productId;
        data["mimeType"] = this.mimeType;
        data["altAttribute"] = this.altAttribute;
        data["titleAttribute"] = this.titleAttribute;
        data["binaryData"] = this.binaryData;
        data["photoId"] = this.photoId;
        return data; 
    }
}

export interface IProductPhotoOutputDto {
    productId?: number | undefined;
    mimeType?: string | undefined;
    altAttribute?: string | undefined;
    titleAttribute?: string | undefined;
    binaryData?: string | undefined;
    photoId?: number | undefined;
}

export class ApiException extends Error {
    message: string;
    status: number; 
    response: string; 
    headers: { [key: string]: any; };
    result: any; 

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): Observable<any> {
    if (result !== null && result !== undefined)
        return _observableThrow(result);
    else
        return _observableThrow(new ApiException(message, status, response, headers, null));
}

function blobToText(blob: any): Observable<string> {
    return new Observable<string>((observer: any) => {
        if (!blob) {
            observer.next("");
            observer.complete();
        } else {
            let reader = new FileReader(); 
            reader.onload = event => { 
                observer.next((<any>event.target).result);
                observer.complete();
            };
            reader.readAsText(blob); 
        }
    });
}

